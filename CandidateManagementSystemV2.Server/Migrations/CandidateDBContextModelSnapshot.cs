// <auto-generated />
using System;
using CandidateManagementSystemV2.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CandidateManagementSystemV2.Server.Migrations
{
    [DbContext(typeof(CandidateDBContext))]
    partial class CandidateDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CandidateManagementSystemV2.Server.Models.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CandidateId"));

                    b.Property<DateTime?>("Archived")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CandidateId");

                    b.ToTable("Candidates");

                    b.HasData(
                        new
                        {
                            CandidateId = 1,
                            Created = new DateTime(2024, 3, 30, 9, 25, 12, 12, DateTimeKind.Utc).AddTicks(170),
                            Email = "john.doe@example.com",
                            Experience = 5,
                            Name = "John Doe",
                            Phone = "1234567890"
                        },
                        new
                        {
                            CandidateId = 2,
                            Created = new DateTime(2024, 3, 30, 9, 25, 12, 12, DateTimeKind.Utc).AddTicks(245),
                            Email = "jane.doe@example.com",
                            Experience = 1,
                            Name = "Jane Doe",
                            Phone = "0987654321"
                        });
                });

            modelBuilder.Entity("CandidateManagementSystemV2.Server.Models.CandidatePosition", b =>
                {
                    b.Property<int>("CandidateId")
                        .HasColumnType("integer");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.HasKey("CandidateId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("CandidatePositions");

                    b.HasData(
                        new
                        {
                            CandidateId = 1,
                            PositionId = 1
                        },
                        new
                        {
                            CandidateId = 2,
                            PositionId = 2
                        });
                });

            modelBuilder.Entity("CandidateManagementSystemV2.Server.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PositionId"));

                    b.Property<DateTime?>("Archived")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            PositionId = 1,
                            Created = new DateTime(2024, 3, 30, 9, 25, 12, 11, DateTimeKind.Utc).AddTicks(9954),
                            Description = "Develops software.",
                            Title = "Software Developer"
                        },
                        new
                        {
                            PositionId = 2,
                            Created = new DateTime(2024, 3, 30, 9, 25, 12, 11, DateTimeKind.Utc).AddTicks(9959),
                            Description = "Works with data.",
                            Title = "Data Scientist"
                        });
                });

            modelBuilder.Entity("CandidateManagementSystemV2.Server.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SkillId"));

                    b.Property<DateTime?>("Archived")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CandidateId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("integer");

                    b.HasKey("SkillId");

                    b.HasIndex("CandidateId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            SkillId = 1,
                            CandidateId = 1,
                            Created = new DateTime(2024, 3, 30, 9, 25, 12, 12, DateTimeKind.Utc).AddTicks(294),
                            Name = "C#",
                            YearsOfExperience = 5
                        },
                        new
                        {
                            SkillId = 2,
                            CandidateId = 1,
                            Created = new DateTime(2024, 3, 30, 9, 25, 12, 12, DateTimeKind.Utc).AddTicks(302),
                            Name = "JavaScript",
                            YearsOfExperience = 3
                        },
                        new
                        {
                            SkillId = 3,
                            CandidateId = 2,
                            Created = new DateTime(2024, 3, 30, 9, 25, 12, 12, DateTimeKind.Utc).AddTicks(304),
                            Name = "SQL",
                            YearsOfExperience = 4
                        },
                        new
                        {
                            SkillId = 4,
                            CandidateId = 2,
                            Created = new DateTime(2024, 3, 30, 9, 25, 12, 12, DateTimeKind.Utc).AddTicks(306),
                            Name = "Python",
                            YearsOfExperience = 2
                        });
                });

            modelBuilder.Entity("CandidateManagementSystemV2.Server.Models.CandidatePosition", b =>
                {
                    b.HasOne("CandidateManagementSystemV2.Server.Models.Candidate", "Candidate")
                        .WithMany("CandidatePositions")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CandidateManagementSystemV2.Server.Models.Position", "Position")
                        .WithMany("CandidatePositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("CandidateManagementSystemV2.Server.Models.Skill", b =>
                {
                    b.HasOne("CandidateManagementSystemV2.Server.Models.Candidate", "Candidate")
                        .WithMany("Skills")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("CandidateManagementSystemV2.Server.Models.Candidate", b =>
                {
                    b.Navigation("CandidatePositions");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("CandidateManagementSystemV2.Server.Models.Position", b =>
                {
                    b.Navigation("CandidatePositions");
                });
#pragma warning restore 612, 618
        }
    }
}
